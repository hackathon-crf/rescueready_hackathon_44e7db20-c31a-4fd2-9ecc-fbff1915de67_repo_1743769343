import streamlit as st
from pathlib import Path
from frontend.middleware import call_backend_test
from frontend.mistral import call_mistral
from frontend.RAG import get_embeddings, get_collections, query_llm_with_embeddings
from frontend.chatbot import display_chatbot
import requests
import threading
import time
import os
from frontend.audio_file import record_audio, tts_huggingface, transcribe_audio, send_to_backend

recording_flag = {"active": False}

SYSTEM_PROMPT2 = """
            Tu es une application qui remplace les formateurs de la Croix-Rouge. Tu dois proposer √† l'utilisateur (b√©n√©vole form√© aux premiers secours) 
            des cas concrets en utilisant les embeddings fournis comme contexte pour entrainer l'utilisateur, en ne lui donnant pas toutes les informations en m√™me temps, mais au fur et √† mesure de leur d√©couverte. 
            Par exemple, au d√©part, tu ne lui donnes que les informations pour lesquelles il a √©t√© appel√©. 
            Puis, lorsque l'utilisateur arrive sur place, tu lui fournis les informations visuelles qu'il peut constater en regardant la sc√®ne dans son ensemble, 
            avant de lui demander ce qu'il ferait dans cette situation. 
            Tu lui fournis des informations suppl√©mentaires en fonction de sa r√©ponse : par exemple, s'il te dit ¬´ interroger les t√©moins ¬ª, tu lui donnes les informations correspondantes. 
            S'il te dit prendre la tension de la victime, tu lui donnes l'information correspondante, puis tu attends sa prochaine action. 
            Tu dois √©valuer ses actions et son analyse sur la base de la partie √âvaluation de la fiche de cas.
            Fournis toujours une r√©ponse claire et concise bas√©e sur le sens s√©mantique captur√© par les embeddings. 
            Commence directement par le sc√©nario sans dire "Bien s√ªr, voici...".
            Ne rappelle pas les √©tapes √† suivre et finis la question initiale "Que faites-vous ou qu'en d√©duisez-vous ?
            Ensuite adapte toi a la reponse de l'utilisateur, si sa reponse nest pas assez precise, demande lui de preciser, par exemple lorsquil dit faire une action, demande lui comment il la fait"
            Si l etape decrite te convient, dis que ca te convient et pose la question pour le faire passer a l action ou aux constatations suivantes
            Si il manque des precisions et que apres avoir demande des precisions l utilisateur de te les donne pas, donne les lui.
            """

SYSTEM_PROMPT = """
            Tu es une application qui remplace les formateurs de la Croix-Rouge. Tu dois proposer √† l'utilisateur (b√©n√©vole form√© aux premiers secours)
            des cas concrets en utilisant les embeddings fournis comme contexte pour entrainer l'utilisateur, en ne lui donnant pas toutes les informations en m√™me temps, mais au fur et √† mesure de leur d√©couverte.
            Par exemple, au d√©part, tu ne lui donnes que les informations pour lesquelles il a √©t√© appel√© ainsi que la plainte principale ou la raison de l'appel.
            Puis, lorsque l'utilisateur arrive sur place, tu lui fournis les informations visuelles qu'il peut constater en regardant la sc√®ne dans son ensemble,
            avant de lui demander ce qu'il ferait dans cette situation. Par exemple, tu peux lui donner son age, son sexe, et l'√©tat apparent de la victime :
            consciente, inconsciente, difficult√©s √† respirer ou √† parler, si la victime semble souffrir ou se plaindre spontan√©ment, si la victime saigne abondamment etc.
            Pour cela, tu peux t'appuyer sur les embeddings et notamment le "PSE guide pratique 2023" dans lequel tu pourras trouver l'ensemble de signes cliniques de l'ensemble des situations trait√©es.
            Tu lui fournis des informations suppl√©mentaires en fonction de sa r√©ponse : par exemple, s'il te dit ¬´ interroger les t√©moins ¬ª, tu lui donnes les informations correspondantes.
            Si il d√©sire interroger la victime et que celle ci est consciente, elle peut alors r√©pondre √† ses questions en apportant des pr√©cisions concernant la plainte principale, ses ant√©c√©dents et les traitements qu'elles prends et donner toutes autres informations pertinentes √† la prise en charge de cette victime.
            S'il te dit prendre la tension de la victime, tu lui donnes l'information correspondante, puis tu attends sa prochaine action. Si aucune donn√©e n'est pr√©sente sur la fiche, alors tu donnes une valeur normale de r√©f√©rence pour la donn√©e demand√©e.
            Tu dois √©valuer ses actions et son analyse sur la base des embeddings et notamment du "PSE guide pratique 2023".
            Si des erreurs sont commises, ne les corrige pas imm√©diatement. Mais pose plutot des questions √† l'utilisateur afin de le faire r√©fl√©chir et emm√®ne le √† trouver la solution par lui m√™me.
            Par exemple, tu peux lui demander quel est le risque d'agir ou de ne pas agir face √† cette situation, ou quel est l'objectif de l'action de secours. Si un probl√®me est d√©tect√© mais que le participant n'agit pas, accompagne le √† comprendre l'importance d'agir en lui posant des questions et en le guidant si besoin.
            La d√©marche d'apprentissage doit rester la priorit√©.
            Fournis toujours une r√©ponse claire et concise bas√©e sur le sens s√©mantique captur√© par les embeddings.
            Commence directement par le sc√©nario sans dire "Bien s√ªr, voici...".
            Ne rappelle pas les √©tapes √† suivre et finis la question initiale "Que faites-vous ou qu'en d√©duisez-vous ?
            Ensuite adapte toi a la reponse de l'utilisateur, si sa r√©ponse n'est pas assez pr√©cise, demande lui de pr√©ciser, par exemple lorsqu'il dit faire une action, demande lui comment il la fait.
            Si l'√©tape d√©crite te convient, c'est √† dire qu'elle est conforme aux embeddings et notamment le "PSE guide pratique 2023", dis que √ßa te convient et pose la question pour le faire passer √† l'action ou aux constatations suivantes.
            Si le participant d√©sire appeler les secours, tu joueras alors le r√¥le de l'interlocuteur. Tu pourras alors lui demander les informations n√©cessaires √† la compr√©hension de la situation, des gestes r√©alis√©s, des donn√©es mesur√©es.
            Un dialogue peut s'installer avec le secouriste et des conseils peuvent √™tre donn√©s. Pour cela, tu t'appuies sur les embeddings et notamment le "PSE guide pratique 2023" partie "transmission du bilan".
            Tu bases tes r√©ponses et tes conseils sur le "PSE guide pratique 2023" notamment en t'appuyant sur les parties "conduite √† tenir" afin de fournir des r√©ponses cr√©dibles et m√©dicalement fiables.
            Si il manque des pr√©cisions et que apr√®s avoir demand√© des pr√©cisions, si l'utilisateur ne te les donne pas, donne les lui en faisant r√©f√©rence aux embeddings et notamment le "PSE guide pratique 2023 ou au "CRF_Memento operationnel_2024_DEF"
            Tu mets fin √† la simulation quand tu juges que la situation a √©t√© bien g√©r√©e, soit qu'elle ait √©t√© r√©gl√©e par l'utilisateur, soit que les secours aient pris le relais. L'utilisateur peut √©galement demander √† mettre fin √† la simulation de mani√®re pr√©matur√©e.
            Quand tu mets fin √† la simulation, tu fais un petit r√©cap de ce qui √©tait bien r√©pondu ou moins bien r√©pondu par l'utilisateur, en orientant vers les parties des documents des embeddings qui auraient permis d'am√©liorer les r√©ponses.
            """

def answer_llm(user_input):
    embeddings = st.session_state.get("embeddings", None)
    messages = st.session_state.get("messages", [])

    if not embeddings or not messages:
        return "Erreur : la simulation n'a pas √©t√© initialis√©e."

    response = query_llm_with_embeddings(user_input, embeddings, messages)
    return response

def start_simulation(category):
    query = f"propose moi une simulation guid√©e formative sur {category}"

    st.session_state["messages"] = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": query}
    ]
    st.session_state["conversation"] = []
    st.session_state["embeddings"] = []
    collection_names = ["PSE_fichesdecas", "CI_2022_CasConcrets", "guide_pedagogique_psc", "Guide_PSE", "CRF_Memento_operationnel"]  # Add other collections as needed

    # Get embeddings for each collection and accumulate them
    for collection_name in collection_names:
        embeddings = get_embeddings(query, collection_name)
        if embeddings:
            st.session_state["embeddings"].append(embeddings)
    # st.session_state["embeddings"] = get_embeddings(query, "PSE_fichesdecas")
    answer = query_llm_with_embeddings(query, st.session_state["embeddings"], st.session_state["messages"])
    st.session_state["conversation"].append(f"Chatbot : {answer}")
    st.session_state["messages"].append({"role": "assistant", "content": answer})

def display_conversation():
    conversation = st.session_state.get("conversation", [])
    for msg in conversation:
        if msg.startswith("Chatbot :"):
            st.markdown(f"""
            <div style='background-color:#f8d7da; padding:10px; border-radius:10px; margin:5px 0;'>
                ü§ñ <b>Chatbot :</b> {msg.replace("Chatbot :", "")}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style='background-color:#d4edda; padding:10px; border-radius:10px; margin:5px 0; text-align:right;'>
                üßë <b>Vous :</b> {msg}
            </div>
            """, unsafe_allow_html=True)

def handle_user_interaction():
    if "recording" not in st.session_state:
        st.session_state.recording = False
    if "transcribed_text" not in st.session_state:
        st.session_state.transcribed_text = ""
    user_input = st.text_input("Tapez un message...")
    if st.button("Envoyer"):
        if user_input.strip():
            st.session_state["conversation"].append(user_input)
            st.session_state["messages"].append({"role": "user", "content": user_input})
            answer = answer_llm(user_input)
            st.session_state["conversation"].append(f"Chatbot : {answer}")
            st.session_state["messages"].append({"role": "assistant", "content": answer})
            st.rerun()
        else:
            st.warning("Veuillez entrer un message.")
    if st.button("üéô Record Voice"):
        if not st.session_state.recording:
            st.session_state.recording = True
            st.session_state.start_time = time.time()
            recording_flag["active"] = True
            filename = "output.wav"
            duration = 6
            st.info("üéô Enregistrement en cours... Parlez maintenant")
            threading.Thread(target=record_audio, args=(filename, duration, recording_flag)).start()

    # Bouton pour arr√™ter et transcrire
    if st.button("‚èπ Stop Recording"):
        recording_flag["active"] = False
        st.session_state.recording = False

        transcription_file = "last_transcription.txt"
        text = ""
        file_mtime_before = os.path.getmtime(transcription_file) if os.path.exists(transcription_file) else 0

        with st.spinner("‚è≥ Transcription en cours..."):
            timeout = 15  # secondes
            start = time.time()

            while time.time() - start < timeout:
                if os.path.exists(transcription_file):
                    file_mtime_after = os.path.getmtime(transcription_file)
                    if file_mtime_after > file_mtime_before:
                        with open(transcription_file, "r") as f:
                            text = f.read().strip()
                        if text:
                            break
                time.sleep(0.2)

        if text:
            st.session_state.transcribed_text = text
            st.success("Transcription termin√©e ‚úÖ")

            # Ajouter la transcription √† la conversation comme un message utilisateur
            st.session_state["conversation"].append(text)
            st.session_state["messages"].append({"role": "user", "content": text})
            answer = answer_llm(text)
            st.session_state["conversation"].append(f"Chatbot : {answer}")
            st.session_state["messages"].append({"role": "assistant", "content": answer})
            st.experimental_rerun()
        else:
            st.warning("‚ö†Ô∏è Transcription non re√ßue √† temps.")
        

def main():
    st.sidebar.title("Navigation")
    selected_page = st.sidebar.radio("Go to", ["RescueReady App"])
    
    if selected_page == "RescueReady App":
        st.title("Simulation")

        # Liste d√©roulante avec les cat√©gories
        categories = {
            "A": "Protection et s√©curit√©",
            "B": "Urgences vitales",
            "C": "Affections m√©dicales",
            "D": "Affections traumatiques",
            "E": "Affections circonstancielles",
            "F": "Souffrance psychique et comportements inhabituels",
            "H": "Situations particuli√®res"
        }
        category = st.selectbox("Choisissez une cat√©gorie", list(categories.values()))
        if st.button("D√©marrer la simulation"):
            st.session_state["simulation_started"] = True
            start_simulation(category)

        if st.session_state.get("simulation_started", False):
            display_conversation()
            handle_user_interaction()

        # st.subheader("Enregistrement vocal")
        # if st.button("Enregistrer un message vocal"):
        #     st.write("Enregistrement en cours... (Non impl√©ment√©)")